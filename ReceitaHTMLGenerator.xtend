/*
 * generated by Xtext 2.15.0
 */
package trabalho3.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import trabalho3.receitaHTML.Ingrediente
import trabalho3.receitaHTML.Programa
import trabalho3.receitaHTML.Receita
import trabalho3.receitaHTML.Utensilio

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ReceitaHTMLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        //val prog = resource as Programa;
        
        //for( r : prog.receitas ) {
        for (r : resource.allContents.toIterable.filter(Receita)) {
            fsa.generateFile(
                r.name + ".html",
                r.compile)
        }
        
    }
 
	def compile(Receita e) ''' 
		<html>
		<header><title>Receita «e.tipo.toString()» de «e.name»</title></header>
		<body>
		«e.name»
		<br>
			«FOR n:e.corpo.necessidades.filter(Ingrediente)»
				«n.compileNecessidade» <br/>
			«ENDFOR»
		<br>
			«FOR n:e.corpo.necessidades.filter(Utensilio)»
				«n.compileNecessidade»
			«ENDFOR»
		<br>
		</body>
		</html>
    '''
    
    def dispatch compileNecessidade(Ingrediente i) '''Ingrediente: «i.quantidade.intValue» «i.tipo» de «i.name»'''
	
	def dispatch compileNecessidade(Utensilio u) '''
       Utensilio: «u.name»
	'''
//
//«««      «for (ingredientes : necessidades.eAllContents.toIterable.filter(Ingredientes)) {
//«««                  
//«««                      ingredientes.compile
//«««              }»
//
//      
//    '''
//    
//    def compile(Ingredientes ingredientes) ''' 
//
//       
//    '''
    
   
}
