/*
 * generated by Xtext 2.15.0
 */
package trabalho3.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import trabalho3.receitaHTML.Receita
import trabalho3.receitaHTML.Necessidades
import trabalho3.receitaHTML.Ingredientes
import trabalho3.receitaHTML.Ingrediente

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ReceitaHTMLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
        for (e : resource.allContents.toIterable.filter(Receita)) {
            fsa.generateFile(
                e.name + ".html",
                e.compile)
        }
        
    }
 
    def compile(Receita e) ''' 
       
      <html>
      <header><title>Receita «e.tipo.toString()» de «e.name»</title></header>
      <body>
      «e.name» <br>
      «FOR n:e.corpo.necessidades»
                «n.compile»
      «ENDFOR» <br>
      </body>
      </html>

      
    '''
    
    def compile(Necessidades necessidades) ''' 
       Chegou em necessidades!
       «for (ingredientes : necessidades.eAllContents.toIterable.filter(Ingredientes)) {
                  
                      ingredientes.compile
              }»

       
    '''
    
    def compile(Ingredientes ingredientes) ''' 
       Chegou em ingredientes!
       «for (ingrediente : ingredientes.eAllContents.toIterable.filter(Ingrediente)) {
                  
                      ingrediente.compile
              }»

       
    '''
    
    def compile(Ingrediente ingrediente) ''' 
		Chegou em ingrediente!
		«ingrediente.name»<br><br>Teste<br>

		
    '''
	
}
